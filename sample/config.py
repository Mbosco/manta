#!/usr/bin/env python

# Example config for Upload. You can use this configuration by specifying:
#   upload_agent.py --config=sample.config
#
# By default, a configuration named config.py will be used, so you
# should likely put your real configuration there.

config = {
    # Directory for storing database upload history.
    'root_dir'     : 'sample/uploadagent-data',
    # Destination URL for uploads. 
    #'dest_url'     : 'http://jsonsyncstore.appspot.com/sample/%s',
    # Alternatively, you can talk to a local test server instead. 
    'dest_url'     : 'http://localhost:8080/sample/%s',

    # How many database upload history directories to save in the data directory.
    'history_size' : 5,
    
    'upload'       : {
        #'num_threads'      : 15,
        # When uploading to a local server, you may want to use a single thread.
        'num_threads'      : 1,

        # Auth token to use when uploading to your server
        # instance. The token is placed in the 'Auth-Token:' header.
        'auth_token'       : 'some_secure_generated_shared_secret',
        },

    # Database and table configuration.
    'sql'          : {
        # Template for each individual SQL command. Can use '%s' if no template desired.
        'command_template' : ' %s; ',
        # Template for the command line to produce the CSV file. The
        # first argument will be a file containing your expanded SQL
        # statement(s), and the second argument will be an output file
        # you should use as the CSV output destination.
        # The example commands given here are for Windows and MS SQL.
        'exec_template'    : 'sqlite3 -header -separator "," sample/database/DB.sqlite \".read %s\" > %s',
        # The post_command, which is optional, will be run on your CSV
        # file after it is generated by the exec command. The
        # arguments are the original file and a new destination file
        # containing the cleaned file.
        #'post_command'     : 'grep -v "^\-\-*,\-\" %s > %s',
        # The match_lines stanza, which is optional, will be applied
        # as a filter to the data lines in the output CSV file,
        # returning only lines containing the specified string. This
        # is provided as a convenience for when you want to filter
        # data (such as for local testing), since stripping and
        # re-adding the header can be difficult in the post_command.
        # You should generally not use this setting in production.
        #'match_lines'      : 'CD0010',

        # The tables you want to keep synchronized with this
        # utility. You should create one command stanza for each
        # table. Each stanza contains an user-friendly name for the
        # table, which will be used as the table name when uploading
        # to Store. The column names in the output will be used as the
        # properties of the JSON object. Important note: the first
        # column you return will be used as the primary key of the
        # data you upload, and that key must be stable-- it is how the
        # upload_agent determines changes to particular elements of
        # data.
        'commands'         : [
            {
                'name'    : 'Client',
                'command' : "select clientid,name,groupid,officerid,balance,phone_number,nationalid from Client",
                },
            {
                'name'    : 'Officer',
                'command' : "select officerid,name,officeid from Officer",
                },
            {
                'name'    : 'Group',
                'command' : "select groupid,name,officerid,officeid from 'Group'",
                },
            {
                'name'    : 'Transaction',
                'command' : "select entryid,clientid,officerid,posting_date,documentid,description,amount,transaction_type from 'Transaction'",
                },
            {
                'name'    : 'Loan',
                'command' : "select loanid,application_date,clientid,officerid,status,issued_date,installments,disbursement_date,amount,payment_due,balance,principal_arrears_30,principal_arrears_90,principal_arrears_180,principal_arrears_over180,arrears,grace_period,grace_period_pays_interest,interest_rate,interest_method,funds_source from Loan",
                },
            ],
        },
    }
