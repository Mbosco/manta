#!/usr/bin/env python

# Example config for Upload. You can use this configuration by specifying:
#   upload_agent.py --config=config_sample
#
# By default, a configuration named config.py will be used, so you
# should likely put your real configuration there.

config = {
    # Directory for storing database upload history.
    'root_dir'     : 'C:\\Manta\\Data\\uploadagent\\',
    # Destination URL for uploads. 
    'dest_url'     : 'http://jsonsyncstore.appspot.com/your_organization_name/%s',
    # Alternatively, you can talk to a local test server instead. 
    #'dest_url'     : 'http://localhost:8080/your_organization_name/%s',

    # How many database upload history directories to save in the data directory.
    'history_size' : 5,
    
    'upload'       : {
        'num_threads'      : 15,
        # When uploading to a local server, you may want to use a single thread.
        #'num_threads'      : 1,

        # Auth token to use when uploading to your server
        # instance. The token is placed in the 'Auth-Token:' header.
        'auth_token'       : 'some_secure_generated_shared_secret',
        },

    # Database and table configuration.
    'sql'          : {
        # Template for each individual SQL command. Can use '%s' if no template desired.
        'command_template' : 'set nocount on; %s; ',
        # Template for the command line to produce the CSV file. The
        # first argument will be a file containing your expanded SQL
        # statement(s), and the second argument will be an output file
        # you should use as the CSV output destination.
        # The example commands given here are for Windows and MS SQL.
        'exec_template'    : 'sqlcmd -S 192.168.1.2 -d "NAVISION DB" -W -w 999 -s"," -U mantauser -P s3cr3t -i %s > %s',
        # The post_command, which is optional, will be run on your CSV
        # file after it is generated by the exec command. The
        # arguments are the original file and a new destination file
        # containing the cleaned file.
        'post_command'     : 'findstr /v "^\-\-*,\-\-*" %s > %s',
        # The match_lines stanza, which is optional, will be applied
        # as a filter to the data lines in the output CSV file,
        # returning only lines containing the specified string. This
        # is provided as a convenience for when you want to filter
        # data (such as for local testing), since stripping and
        # re-adding the header can be difficult in the post_command.
        # You should generally not use this setting in production.
        'match_lines'      : 'CD0010',

        # The tables you want to keep synchronized with this
        # utility. You should create one command stanza for each
        # table. Each stanza contains an user-friendly name for the
        # table, which will be used as the table name when uploading
        # to Store. The column names in the output will be used as the
        # properties of the JSON object. Important note: the first
        # column you return will be used as the primary key of the
        # data you upload, and that key must be stable-- it is how the
        # upload_agent determines changes to particular elements of
        # data.
        #
        # The specific example SQL statements used here are not likely
        # to be useful to anyone, as they represent a set of complex
        # SQL statements used to output data needed by the Simple MFI
        # application from a Microsoft Dynamic NAV / Navision
        # database.
        'commands'         : [
            {
                'name'    : 'Client',
                'command' : ("select [No_] as clientid, replace([Name],',','_') as name, [Group Code] as groupid, "+
                             "[Credit Officer] as officerid, Balance as balance from [YourOrg$Customer] "+
                             "left join (SELECT [Customer No_], SUM(Amount) AS Balance FROM [YourOrg$Detailed Cust_ Ledg_ Entry] "+
                             "WHERE ([Transaction Type] IN (1, 4)) AND ([Entry Type] = 1) "+
                             "GROUP BY [Customer No_]) as Savings on ([YourOrg$Customer].[No_] = [Savings].[Customer No_]);"),
                },
            {
                'name'    : 'Officer',
                'command' : "select [Code] as officerid, replace([Name],',','_') as name, [Field Office] as officeid from [YourOrg$Organization Staff];",
                },
            {
                'name'    : 'Group',
                'command' : "select [Code] as groupid, replace([Description],',','_') as name, [Credit Officer] as officerid, [Field Office] as officeid from [YourOrg$Loan Groups];"
                },
            {
                'name'    : 'Loan',
                'command' : """SELECT     dbo.[YourOrg$Lease Application Form].[Loan  No_] AS loanid, dbo.[YourOrg$Lease Application Form].[Application Date] AS application_date, 
                      dbo.[YourOrg$Lease Application Form].[Client Code] AS clientid, Client.officerid, 
                      dbo.[YourOrg$Lease Application Form].[Loan Status] AS status, dbo.[YourOrg$Lease Application Form].[Issued Date] AS issued_date, 
                      dbo.[YourOrg$Lease Application Form].Installments AS installments, 
                      dbo.[YourOrg$Lease Application Form].[Loan Disbursement Date] AS disbursement_date, 
                      dbo.[YourOrg$Lease Application Form].[Loan Amount] AS amount, dbo.[YourOrg$Lease Application Form].Repayment AS payment_due, 
                      LoanBalance.Balance AS balance, coalesce(LoanArrears.principal_arrears_30, 0) as principal_arrears_30, coalesce(LoanArrears.principal_arrears_90, 0) as principal_arrears_90, coalesce(LoanArrears.principal_arrears_180, 0) as principal_arrears_180, 
                      coalesce(LoanArrears.principal_arrears_over180, 0) as principal_arrears_over180, coalesce(LoanArrears.arrears, 0) as arrears
FROM         dbo.[YourOrg$Lease Application Form] LEFT OUTER JOIN
                          (SELECT     No_, [Credit Officer] AS officerid
                            FROM          dbo.[YourOrg$Customer]) AS Client ON dbo.[YourOrg$Lease Application Form].[Client Code] = Client.No_ LEFT OUTER JOIN
                          (SELECT     [Loan No], SUM(Amount) AS Balance
                            FROM          dbo.[YourOrg$Detailed Cust_ Ledg_ Entry]
                            WHERE      ([Transaction Type] IN (2, 3, 7)) AND ([Entry Type] = 1) AND ([Loan No] LIKE '_%')
                            GROUP BY [Loan No]) AS LoanBalance ON dbo.[YourOrg$Lease Application Form].[Loan  No_] = LoanBalance.[Loan No] LEFT OUTER JOIN
                          (SELECT     [Loan No] AS loanid, [1-30 Amt] AS principal_arrears_30, [31-90 Amt] AS principal_arrears_90, [91-180 Amt] AS principal_arrears_180, 
                                                   [Over 180 Amt] AS principal_arrears_over180, [Amt in Arrears] AS arrears
                            FROM          dbo.[YourOrg$Lease Age Analysis2]) AS LoanArrears ON 
                      dbo.[YourOrg$Lease Application Form].[Loan  No_] = LoanArrears.loanid
WHERE     (dbo.[YourOrg$Lease Application Form].[Application Date] > '2009-01-01 00:00:00.000');""",
                },
            {
                'name'    : 'Transaction',
                'command' : """SELECT          dbo.[YourOrg$Cust_ Ledger Entry].[Entry No_] AS entryid, dbo.[YourOrg$Cust_ Ledger Entry].[Customer No_] AS clientid, 
                      Client.officerid, dbo.[YourOrg$Cust_ Ledger Entry].[Posting Date] AS posting_date, 
                      dbo.[YourOrg$Cust_ Ledger Entry].[Document No_] AS documentid, REPLACE(dbo.[YourOrg$Cust_ Ledger Entry].Description, ',', '_') 
                      AS description, dbo.[YourOrg$Detailed Cust_ Ledg_ Entry].Amount AS amount, 
                      dbo.[YourOrg$Cust_ Ledger Entry].[Transaction Type] AS transaction_type
FROM         dbo.[YourOrg$Cust_ Ledger Entry] LEFT OUTER JOIN
                          (SELECT     No_, [Credit Officer] AS officerid
                            FROM          dbo.[YourOrg$Customer]) AS Client ON dbo.[YourOrg$Cust_ Ledger Entry].[Customer No_] = Client.No_ INNER JOIN
                      dbo.[YourOrg$Detailed Cust_ Ledg_ Entry] ON 
                      dbo.[YourOrg$Cust_ Ledger Entry].[Entry No_] = dbo.[YourOrg$Detailed Cust_ Ledg_ Entry].[Cust_ Ledger Entry No_]
WHERE     (dbo.[YourOrg$Cust_ Ledger Entry].[Posting Date] > '2011-03-01 00:00:00.000') AND (dbo.[YourOrg$Cust_ Ledger Entry].Reversed = 0) AND 
                      (dbo.[YourOrg$Detailed Cust_ Ledg_ Entry].[Applied Cust_ Ledger Entry No_] = 0) AND 
                      (dbo.[YourOrg$Cust_ Ledger Entry].[Transaction Type] in (1, 2, 3, 4, 7)) AND
		(SUBSTRING(dbo.[YourOrg$Cust_ Ledger Entry].[Document No_], 1, 1) BETWEEN '0' AND '9') 

ORDER BY entryid;""",
                },
            ],
        },
    }
